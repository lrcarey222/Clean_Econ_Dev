#ALL_GEOS_COMBINED_DASHBOARD
#LAST UPDATED: April 17, 2025 
#  KEY FEATURES
#  • Auto‑detect CSV path (macOS / Windows) or prompt user
#  • RMI‑branded responsive UI, stacked white logo
#  • Interactive scatter: colour & size mapping; optional labels; Loess trend
#  • Auto colour‑scale (numeric → sequential, categorical → qualitative)
#  • Axis‑unit selector (Number / K / M / B) – never scientific notation
#  • Correlation card now shows value + significance + direction
#  • Extensive defensive logging / error handling
###############################################################################

## ───────────────────────────── 0.  GLOBALS ──────────────────────────────────
options(stringsAsFactors = FALSE, warn = 1, width = 120, scipen = 999)  # no sci‑notation
DEBUG_VERBOSE <- TRUE
log_msg <- function(msg, level = "INFO") {
  if (!DEBUG_VERBOSE && level == "DEBUG") return(invisible())
  message(sprintf("[%s] %s: %s",
                  level, format(Sys.time(), "%Y‑%m‑%d %H:%M:%S"), msg))
}

## ──────────────────────────── 1.  LIBRARIES ─────────────────────────────────
log_msg("Loading libraries …")
suppressPackageStartupMessages({
  pkgs <- c("shiny", "bslib", "readr", "dplyr", "tidyr", "ggplot2",
            "plotly", "stringr", "purrr", "scales", "htmltools",
            "RColorBrewer", "ggrepel")
  need <- pkgs[!vapply(pkgs, requireNamespace, logical(1), quietly = TRUE)]
  if (length(need)) stop("❌ Install missing packages: ", paste(need, collapse = ", "))
  purrr::walk(pkgs, library, character.only = TRUE)
})

## ─────────────────────────── 2.  DATA LOADING ───────────────────────────────
detect_csv_path <- function(fname) {
  sys_os <- tolower(Sys.info()[["sysname"]])
  base <- if (grepl("windows", sys_os)) {
    file.path(Sys.getenv("USERPROFILE"), "OneDrive - RMI", "Documents - US Program",
              "6_Projects", "Clean Regional Economic Development", "ACRE",
              "Data", "Raw Data")
  } else {
    file.path("~", "Library", "CloudStorage", "OneDrive-RMI",
              "Documents - US Program", "6_Projects",
              "Clean Regional Economic Development", "ACRE", "Data", "Raw Data")
  }
  file.path(base, fname)
}

csv_file <- detect_csv_path("all_geo_complete_dataset.csv")
if (!file.exists(path.expand(csv_file))) {
  log_msg("Default CSV not found – prompting user to choose file.", "WARN")
  csv_file <- file.choose()
  if (!file.exists(csv_file)) stop("❌ CSV file not selected.")
}
log_msg(paste("Reading:", csv_file))
geo_df <- read_csv(csv_file, show_col_types = FALSE)
log_msg(sprintf("Loaded %s rows × %s columns (%.2f MB)",
                scales::comma(nrow(geo_df)), ncol(geo_df),
                as.numeric(object.size(geo_df))/2^20))

## ──────────────────────── 3.  COLUMN METADATA ───────────────────────────────
id_col          <- intersect(c("geo_name", "county_name", "msa_name"), names(geo_df))[1]
geo_type_col    <- "geo"
has_geo_filter  <- geo_type_col %in% names(geo_df)
geo_types       <- if (has_geo_filter) sort(unique(na.omit(geo_df[[geo_type_col]]))) else character(0)
num_cols        <- setdiff(names(geo_df)[vapply(geo_df, is.numeric, logical(1))],
                           c("...1", "X", "geo_code"))
if (length(num_cols) < 2) stop("❌ Need ≥ 2 numeric columns to plot.")

unit_choices <- c("Number"="num","Thousands (K)"="k","Millions (M)"="m","Billions (B)"="b")
unit_scale <- function(code) switch(code,
                                    num = list(scale=1,     suffix=""),
                                    k   = list(scale=1/1e3, suffix="K"),
                                    m   = list(scale=1/1e6, suffix="M"),
                                    b   = list(scale=1/1e9, suffix="B"))

make_axis_labeller <- function(code) {
  us <- unit_scale(code)
  scales::label_number(scale = us$scale, suffix = us$suffix,
                       accuracy = 0.01, big.mark = ",")
}

label_with_units <- function(var, code) {
  suf <- unit_scale(code)$suffix
  if (suf == "") var else paste0(var, " (", suf, ")")
}

## ─────────────────────────── 4.  BRAND STYLES ───────────────────────────────
rmi <- list(primary="#003B63", secondary="#45CFCC", text="#58595B",
            seq_grad=c("#00263F","#045A7C","#0E9EB4","#9FD0C4","#CFE3C1"))
font_import <- "
@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@400;600;700&display=swap');
"
rmi_css <- sprintf("%s
:root{--primary:%s;--secondary:%s;--text:%s;}
body{font-family:'Source Sans Pro',Helvetica,Arial,sans-serif;background:#fff;color:var(--text);}
.app-header{display:flex;align-items:center;gap:20px;background:var(--primary);color:#fff;padding:20px 30px;margin-bottom:20px;position:relative;overflow:hidden}
.app-header .angle{position:absolute;right:0;top:0;height:100%%;width:70%%;clip-path:polygon(100%% 0,0 0,100%% 100%%);background:linear-gradient(135deg,transparent,var(--secondary) 150%%);opacity:.3}
.app-header h1{margin:0;font-weight:700;font-size:1.6rem;z-index:2}
.app-header p{margin:0;opacity:.9;z-index:2}
.app-header img{height:60px;width:auto;z-index:2}
.sidebar{background:#fff;padding:20px;border-right:1px solid #eee}
.stat-card{background:#fff;border:1px solid #eee;border-left:4px solid var(--primary);padding:15px;margin-bottom:15px;border-radius:3px}
.stat-value{font-size:26px;font-weight:600;color:var(--primary);margin:0}
.stat-label{font-size:14px;color:#6c8792;margin:0}
.filter-tag{display:inline-block;background:#f5f5f5;border:1px solid #e0e0e0;border-radius:3px;padding:4px 12px;margin:0 8px 8px 0;font-size:13px;color:var(--primary)}
.download-section{margin-top:25px;padding-top:10px;border-top:1px solid #eee;text-align:center}
@media(max-width:767px){.sidebar{border-right:none;border-bottom:1px solid #eee;margin-bottom:20px}}
", font_import, rmi$primary, rmi$secondary, rmi$text)

## ───────────────────────────── 5.  UI ───────────────────────────────────────
ui <- fluidPage(
  title = "Economic Development & Cleantech Data Explorer",
  tags$head(tags$style(HTML(rmi_css))),
  div(class="app-header",
      img(src="https://rmi.org/wp-content/uploads/2021/01/rmi_logo_stacked_tag_white.svg",
          alt="RMI", style="height:60px"),
      div(class="angle"),
      div(
        h1("Economic Development & Cleantech Data Explorer"),
        p("Interactive exploration of regional economic and cleantech indicators")
      )
  ),
  fluidRow(
    ## Sidebar ---------------------------------------------------------------
    div(class="col-lg-3 col-md-4 col-sm-12",
        div(class="sidebar",
            h3("Controls"),
            if (has_geo_filter)
              selectInput("geo_filter","Geography Type",c("All"="", geo_types),""),
            selectInput("xvar","X‑axis variable", num_cols, num_cols[1]),
            selectInput("x_units","X‑axis units",unit_choices,"num"),
            selectInput("yvar","Y‑axis variable", num_cols, num_cols[2]),
            selectInput("y_units","Y‑axis units",unit_choices,"num"),
            selectInput("color_var","Colour by", c("None"="none",num_cols), "none"),
            selectInput("size_var","Size by",  c("None"="none",num_cols), "none"),
            conditionalPanel("input.size_var!='none'",
                             radioButtons("size_mode","Size mode",c("Dynamic"="dynamic","Fixed"="fixed"),
                                          "dynamic",inline=TRUE),
                             conditionalPanel("input.size_mode=='dynamic'",
                                              sliderInput("size_range","Size range",1,20,c(3,9),0.5)),
                             conditionalPanel("input.size_mode=='fixed'",
                                              sliderInput("fixed_size","Point size",1,10,3,0.5))
            ),
            sliderInput("opacity","Point opacity",0.1,1,0.7,0.05),
            checkboxInput("show_trend","Add trend line",FALSE),
            checkboxInput("show_labels","Show point labels (≤500 obs)",FALSE),
            checkboxInput("exclude_zero","Exclude X or Y = 0",FALSE),
            sliderInput("sample_n","Sample size",1000,nrow(geo_df),
                        min(10000,nrow(geo_df)),1000)
        )
    ),
    ## Main panel ------------------------------------------------------------
    div(class="col-lg-9 col-md-8 col-sm-12",
        uiOutput("active_filters"),
        div(class="plot-container mb-3", plotlyOutput("scatter", height="600px")),
        fluidRow(
          column(4, div(class="stat-card",
                        h3(textOutput("total_obs"), class="stat-value"),
                        p("Total Observations",class="stat-label"))),
          column(4, div(class="stat-card",
                        h3(textOutput("displayed"), class="stat-value"),
                        p("Displayed Points",class="stat-label"))),
          column(4, uiOutput("corr_card"))
        ),
        fluidRow(
          column(6, div(class="stat-card",
                        h4("X‑Axis Summary"), verbatimTextOutput("x_summary"))),
          column(6, div(class="stat-card",
                        h4("Y‑Axis Summary"), verbatimTextOutput("y_summary")))
        ),
        fluidRow(
          column(12, div(class="stat-card",
                         h4("Correlation Analysis"), verbatimTextOutput("corr_detail")))
        ),
        div(class="download-section",
            downloadButton("download_chart","Download Chart Data",
                           class="btn-primary me-2"),
            downloadButton("download_full","Download Full Dataset",
                           class="btn-primary"))
    )
  )
)

## ─────────────────────── 6.  SERVER LOGIC ───────────────────────────────────
server <- function(input, output, session){
  
  filtered <- reactive({
    df <- geo_df
    if (has_geo_filter && nzchar(input$geo_filter))
      df <- df %>% filter(.data[[geo_type_col]] == input$geo_filter)
    df
  })
  
  plot_df <- reactive({
    req(input$xvar, input$yvar)
    keep <- unique(c(input$xvar,input$yvar,id_col,
                     if (input$color_var!="none") input$color_var,
                     if (input$size_var!="none")  input$size_var))
    df <- filtered() %>% select(all_of(keep)) %>% drop_na()
    if (input$exclude_zero)
      df <- df %>% filter(.data[[input$xvar]]!=0, .data[[input$yvar]]!=0)
    if (nrow(df)>input$sample_n) df <- df[sample.int(nrow(df),input$sample_n),]
    df
  })
  
  ## Statistics --------------------------------------------------------------
  safe_cor <- function(x,y){
    tryCatch(cor.test(x,y), error = function(e) NULL)
  }
  corr <- reactive({
    df <- plot_df(); if(nrow(df)<3) return(NULL)
    safe_cor(df[[input$xvar]], df[[input$yvar]])
  })
  
  output$total_obs <- renderText(scales::comma(nrow(filtered())))
  output$displayed <- renderText(scales::comma(nrow(plot_df())))
  
  output$corr_card <- renderUI({
    ct <- corr()
    if (is.null(ct)) {
      return(div(class="stat-card",
                 h3("N/A", class="stat-value"),
                 p("Correlation coefficient", class="stat-label")))
    }
    r      <- unname(ct$estimate)
    p_val  <- ct$p.value
    signif <- p_val < 0.05
    dir    <- if (r >= 0) "Positive Correlation" else "Negative Correlation"
    badge  <- span(class="filter-tag",
                   if (signif) "Statistically Significant" else "Not Significant")
    div(class="stat-card",
        h3(sprintf("%.3f", r), class="stat-value"),
        badge,
        p(dir, class="stat-label"))
  })
  
  output$x_summary <- renderPrint(summary(plot_df()[[input$xvar]]))
  output$y_summary <- renderPrint(summary(plot_df()[[input$yvar]]))
  output$corr_detail <- renderPrint({
    ct <- corr(); if (is.null(ct)) cat("Insufficient data.") else print(ct)
  })
  
  output$active_filters <- renderUI({
    if (has_geo_filter && nzchar(input$geo_filter))
      div(class="filter-tag", paste("Geography:", input$geo_filter))
  })
  
  ## Scatter -----------------------------------------------------------------
  output$scatter <- renderPlotly({
    df <- plot_df()
    if (nrow(df) < 2) return(plotly_empty() %>% layout(title="Not enough points"))
    
    # tool‑tip
    tt <- paste0(
      if(!is.null(id_col)) paste0(id_col,": ",df[[id_col]],"<br>"),
      input$xvar,": ",scales::comma(df[[input$xvar]]),"<br>",
      input$yvar,": ",scales::comma(df[[input$yvar]]))
    if (input$color_var!="none")
      tt <- paste0(tt,"<br>",input$color_var,": ",
                   if(is.numeric(df[[input$color_var]]))
                     scales::comma(df[[input$color_var]]) else df[[input$color_var]])
    if (input$size_var!="none")
      tt <- paste0(tt,"<br>",input$size_var,": ",
                   if(is.numeric(df[[input$size_var]]))
                     scales::comma(df[[input$size_var]]) else df[[input$size_var]])
    
    p <- ggplot(df, aes(.data[[input$xvar]], .data[[input$yvar]], text=tt))
    
    # colour mapping
    if (input$color_var!="none") {
      col_vec <- df[[input$color_var]]
      if (is.numeric(col_vec)) {
        p <- p + aes(colour=col_vec) +
          scale_colour_gradientn(colours=rmi$seq_grad, name=input$color_var,
                                 labels=make_axis_labeller("num"))
      } else {
        lvls <- length(unique(col_vec))
        pal  <- if (lvls<=8) brewer.pal(max(lvls,3),"Set2") else scales::hue_pal()(lvls)
        p <- p + aes(colour=as.factor(col_vec)) +
          scale_colour_manual(values=pal, name=input$color_var)
      }
    }
    
    # size mapping
    if (input$size_var!="none" && input$size_mode=="dynamic" &&
        is.numeric(df[[input$size_var]])) {
      p <- p + aes(size=.data[[input$size_var]]) +
        scale_size_continuous(range=input$size_range, name=input$size_var) +
        geom_point(alpha=input$opacity)
    } else {
      fixed_sz <- if(input$size_mode=="fixed"&&input$size_var!="none") input$fixed_size else 1.8
      p <- p + geom_point(alpha=input$opacity,
                          size=fixed_sz,
                          colour=if(input$color_var=="none") rmi$primary else NULL)
    }
    
    # labels
    if (isTRUE(input$show_labels) && !is.null(id_col) && nrow(df)<=500)
      p <- p + ggrepel::geom_text_repel(aes(label=.data[[id_col]]),
                                        colour=rmi$primary, size=3,
                                        max.overlaps=Inf, box.padding=0.3)
    
    if (input$show_trend)
      p <- p + geom_smooth(method="loess", se=FALSE,
                           colour=rmi$secondary, linewidth=1)
    
    p <- p +
      scale_x_continuous(labels=make_axis_labeller(input$x_units)) +
      scale_y_continuous(labels=make_axis_labeller(input$y_units)) +
      labs(x=label_with_units(input$xvar, input$x_units),
           y=label_with_units(input$yvar, input$y_units),
           title=paste(input$yvar,"vs",input$xvar),
           subtitle=paste("N =", nrow(df))) +
      theme_minimal(base_family="Source Sans Pro") +
      theme(axis.title=element_text(face="bold", colour=rmi$primary),
            plot.title=element_text(face="bold", colour=rmi$primary, size=16),
            plot.subtitle=element_text(size=12, colour=rmi$text))
    
    ggplotly(p, tooltip="text") %>%
      layout(margin=list(l=55,r=30,b=55,t=80),
             hoverlabel=list(bgcolor="white",bordercolor=rmi$secondary))
  })
  
  ## Downloads ---------------------------------------------------------------
  output$download_chart <- downloadHandler(
    filename=function() paste0("chart_data_", Sys.Date(), ".csv"),
    content=function(f) write.csv(plot_df(), f, row.names=FALSE))
  output$download_full <- downloadHandler(
    filename=function() paste0("full_dataset_", Sys.Date(), ".csv"),
    content=function(f) write.csv(filtered(), f, row.names=FALSE))
}

## ───────────────────────── 7.  LAUNCH APP ───────────────────────────────────
log_msg("Launching Shiny app …")
shinyApp(ui, server)
