################################################################################
# QCEW 2024 •  COMPLETE PIPELINE - MISSING DATA IMPUTATION 

## --------------------------- 0.  OPTIONS / HELPERS ---------------------------
options(stringsAsFactors = FALSE, scipen = 999, datatable.print.topn = 3)

ts_msg <- function(..., newline = TRUE) {                # time‑stamped logger
  txt <- paste0("[", format(Sys.time(), "%Y‑%m‑%d %H:%M:%S"), "] ",
                paste(..., collapse = " "))
  if (newline) message(txt) else message(txt, appendLF = FALSE)
}
mem_snap <- function(lbl = "") {
  ts_msg(sprintf("  >> Memory (%s): %.2f GB", lbl, sum(gc()[,2]) / 1024))
}
stop_if <- function(expr, msg) if (expr) stop(msg, call. = FALSE)

## --------------------------- 1.  LIBRARIES ------------------------------------
ts_msg("Loading libraries …")
libs <- c("data.table", "stringi", "Amelia", "pryr",
          # tidyverse stack for enrichment
          "tidyverse", "readxl")
for (L in libs) if (!requireNamespace(L, quietly = TRUE)) {
  ts_msg("Installing", L)
  install.packages(L, repos = "https://cloud.r-project.org")
}
lapply(libs, library, character.only = TRUE)
mem_snap("after pkgs")

## --------------------------- 2.  PATHS ---------------------------------------
#  • update root dir once, rest auto‑constructed
ROOT <- "~/Library/CloudStorage/OneDrive-RMI/US Program - Documents/6_Projects/Clean Regional Economic Development/ACRE/Data"

RAW_QCEW  <- file.path(ROOT, "Raw Data/BLS/annual_data/QCEW_2024_annual_singlefile.csv")
OUT_IMPUT <- "~/Library/CloudStorage/OneDrive-RMI/Processed/QCEW_2024_annual_imputed.csv"
OUT_ENRCH <- "~/Library/CloudStorage/OneDrive-RMI/Processed/QCEW_2024_annual_enriched.csv"

dir.create(dirname(OUT_IMPUT),  recursive = TRUE, showWarnings = FALSE)
dir.create(dirname(OUT_ENRCH), recursive = TRUE, showWarnings = FALSE)

## --------------------------- 3.  IMPUTATION PARAMETERS -----------------------
NAICS_LVLS   <- 2:6
USE_DIRICH   <- FALSE   # TRUE to randomize shares
ALPHA0       <- 50
MEM_LIMIT_GB <- 18

## --------------------------- 4.  NATIONAL REFERENCE SHARES -------------------
ts_msg("Building national reference shares …")
nat <- fread(RAW_QCEW,
             select = c("area_fips", "industry_code", "agglvl_code",
                        "annual_avg_emplvl"),
             colClasses = c(area_fips="character",
                            industry_code="character",
                            agglvl_code="character"),
             showProgress = FALSE)[area_fips == "US000"]

nat[, annual_avg_emplvl := as.numeric(annual_avg_emplvl)]

ref_share <- list()
for (lvl in NAICS_LVLS[-length(NAICS_LVLS)]) {
  par_len <- lvl
  chi_len <- lvl + 1
  ts_msg("-- National ref shares", par_len, "→", chi_len)
  pars <- nat[agglvl_code == par_len]
  for (pc in pars$industry_code) {
    kids <- nat[agglvl_code == chi_len &
                  stringi::stri_detect_regex(industry_code,
                                             paste0("^", pc, "[0-9A-Z]{1}$"))]
    if (nrow(kids)) {
      tot <- sum(kids$annual_avg_emplvl, na.rm = TRUE)
      if (tot > 0) {
        kids[, share := annual_avg_emplvl / tot]
        ref_share[[pc]] <- kids[, .(industry_code, share)]
      }
    }
  }
}
ts_msg("Reference parents stored:", length(ref_share))
rm(nat); gc()

## --------------------------- 5.  STATE LIST ----------------------------------
ts_msg("Scanning state FIPS list …")
STATE_LIST <- unique(
  sub("\\d{3}$", "",
      fread(RAW_QCEW, select = "area_fips",
            colClasses = "character", showProgress = FALSE)$area_fips))
STATE_LIST <- if ("US" %in% STATE_LIST)
  c("US", setdiff(STATE_LIST, "US")) else STATE_LIST
ts_msg("Total state chunks:", length(STATE_LIST))

if (file.exists(OUT_IMPUT)) file.remove(OUT_IMPUT)   # fresh run guard

## --------------------------- 6.  CHUNKED IMPUTATION LOOP ---------------------
for (ST in STATE_LIST) {
  ts_msg("\n=================================================")
  ts_msg("STATE CHUNK:", ST)
  
  patt <- if (ST == "US") "^US000$" else paste0("^", ST, "\\d{3}$")
  chunk <- fread(RAW_QCEW,
                 select = c("area_fips","industry_code","agglvl_code",
                            "annual_avg_emplvl"),
                 colClasses = c(area_fips="character",
                                industry_code="character",
                                agglvl_code="character"),
                 showProgress = FALSE)[stringi::stri_detect_regex(area_fips, patt)]
  stop_if(nrow(chunk)==0, paste("No rows pulled for", ST))
  chunk[, annual_avg_emplvl := as.numeric(annual_avg_emplvl)]
  mem_snap(paste(ST, "loaded"))
  
  NA_start <- sum(is.na(chunk$annual_avg_emplvl))
  ts_msg("Suppressed cells:", NA_start)
  
  ## ---- LEVEL‑BY‑LEVEL FILL ---------------------------------------------------
  for (lvl in NAICS_LVLS) {
    par_len <- lvl - 1
    if (par_len < 2) next
    pars <- chunk[agglvl_code == par_len]
    if (!nrow(pars)) next
    ts_msg("Imputing children of length", par_len, "→", lvl,
           "parents:", nrow(pars))
    
    # iterate parents
    for (ii in 1:nrow(pars)) {
      pc   <- pars$industry_code[ii]
      pval <- pars$annual_avg_emplvl[ii]
      if (is.na(pval) || pval == 0) next
      
      kids_idx <- chunk[
        agglvl_code == lvl &
          stringi::stri_detect_regex(industry_code,
                                     paste0("^", pc, "[0-9A-Z]{1}$")),
        which = TRUE]
      if (!length(kids_idx)) next
      
      known_sum <- sum(chunk$annual_avg_emplvl[kids_idx], na.rm = TRUE)
      NA_kids   <- kids_idx[is.na(chunk$annual_avg_emplvl[kids_idx])]
      nk        <- length(NA_kids)
      remainder <- pval - known_sum
      if (nk == 0 || remainder < 0) next    # negative remainder improbable
      
      if (nk == 1) {
        chunk$annual_avg_emplvl[NA_kids] <- remainder
      } else {
        shares <- ref_share[[pc]]
        if (!is.null(shares))
          shares <- shares[industry_code %in%
                             chunk$industry_code[NA_kids]]
        if (is.null(shares) || nrow(shares)!=nk) {
          shares <- data.table(industry_code = chunk$industry_code[NA_kids],
                               share = 1/nk)
        } else shares[, share := share/sum(share)]
        
        if (USE_DIRICH) {
          dir <- rgamma(nk, shape = shares$share * ALPHA0, rate = 1)
          shares$share <- dir / sum(dir)
        }
        chunk$annual_avg_emplvl[NA_kids] <- shares$share * remainder
      }
    } # parent loop
    
    # Post‑level debug
    if (anyNA(chunk[agglvl_code==lvl]$annual_avg_emplvl))
      ts_msg("  >> WARNING: still NA at level", lvl)
  }
  
  NA_end <- sum(is.na(chunk$annual_avg_emplvl))
  ts_msg("Remaining NAs", NA_end)
  stop_if(NA_end>0, paste("Imputation incomplete for", ST))
  
  ## ---- CONSISTENCY TEST ------------------------------------------------------
  bad <- FALSE
  for (lvl in NAICS_LVLS[-1]) {
    par_lvl <- lvl-1
    pars <- chunk[agglvl_code==par_lvl]
    for (pc in pars$industry_code) {
      pval <- pars[industry_code==pc]$annual_avg_emplvl
      csum <- chunk[agglvl_code==lvl &
                      stringi::stri_detect_regex(industry_code,
                                                 paste0("^", pc, "[0-9A-Z]{1}$")),
                    sum(annual_avg_emplvl)]
      if (!isTRUE(all.equal(pval, csum, tolerance = 1e-4))) {
        ts_msg("Mismatch:", pc, "parent", pval, "childSum", csum)
        bad <- TRUE; break
      }
    }
    if (bad) break
  }
  stop_if(bad, paste("Aggregate mismatch in", ST))
  ts_msg("Chunk passes consistency.")
  
  fwrite(chunk, OUT_IMPUT, append = file.exists(OUT_IMPUT))
  ts_msg("Written rows:", nrow(chunk))
  rm(chunk); invisible(gc())
  mem_snap(paste(ST, "after gc"))
  
  if (sum(gc()[,2])/1024 > MEM_LIMIT_GB-1) {
    invisible(gc(full=TRUE)); Sys.sleep(1)
  }
}

ts_msg("\n=== IMPUTATION COMPLETE ===")
ts_msg("Imputed CSV rows:",
       format(nrow(fread(OUT_IMPUT, select = "area_fips",
                         colClasses = "character", showProgress = FALSE)),
              big.mark=","))

################################################################################
#  PART II • ENRICHMENT  (tidyverse pipeline after imputation)                 #
################################################################################

ts_msg("\n=== ENRICHMENT STAGE ===")

# 2‑a  LOAD REFERENCE FILES
ts_msg("Loading reference files…")
REF <- file.path(ROOT, "Raw Data/BLS/reference_files")
COUNTY_MSA_CSA_CROSSWALK <- read_excel(file.path(REF, "qcew-county-msa-csa-crosswalk.xlsx"), sheet = 3)
NAICS_BASED_ANNUAL_LAYOUT <- read_csv (file.path(REF, "naics-based-annual-layout.csv"), show_col_types=FALSE)
NAICS_HIERARCHY_CROSSWALK <- read_excel(file.path(REF, "qcew-naics-hierarchy-crosswalk.xlsx"))
AGGREGATION_LEVELS       <- read_csv (file.path(REF, "aggregation_levels.csv"), show_col_types=FALSE)
AGGREGATION_LEVEL_MATRIX <- read_csv (file.path(REF, "aggregation_level_matrix.csv"), show_col_types=FALSE)
SIZE_TITLES              <- read_csv (file.path(REF, "size_titles.csv"), show_col_types=FALSE)
OWNERSHIP_TITLES         <- read_excel(file.path(REF, "ownership_titles.xlsx"))
INDUSTRY_TITLES          <- read_csv (file.path(REF, "industry_titles.csv"), show_col_types=FALSE)
AREA_TITLES              <- read_csv (file.path(REF, "area_titles.csv"), show_col_types=FALSE)

## 2‑b LOAD IMPUTED DATA AS tibble (still 3.6 M rows)
ts_msg("Reading imputed data …")
QCEW_IMP <- fread(OUT_IMPUT,
                  colClasses = c(area_fips="character",
                                 industry_code="character",
                                 agglvl_code="character"))
ts_msg("Rows:", nrow(QCEW_IMP))
mem_snap("after imputed read")

# Convert to tibble for tidy joins
QCEW <- as_tibble(QCEW_IMP)
rm(QCEW_IMP); gc()

## 2‑c  START JOIN SEQUENCE -----------------------------------------------------
dbg <- function(step, df) ts_msg(step, "rows:", nrow(df), "cols:", ncol(df))

dbg("Initial", QCEW)

QCEW <- QCEW %>%                    # 1. Join area titles
  left_join(AREA_TITLES, by = "area_fips")
dbg("after AREA_TITLES", QCEW)

QCEW <- QCEW %>%                    # 2. Ownership
  left_join(OWNERSHIP_TITLES, by = "own_code")
dbg("after OWNERSHIP", QCEW)

QCEW <- QCEW %>%                    # 3. Industry names
  left_join(INDUSTRY_TITLES, by = "industry_code")
dbg("after INDUSTRY", QCEW)

QCEW <- QCEW %>%                    # 4. Agglvl titles
  left_join(AGGREGATION_LEVELS, by = "agglvl_code")
dbg("after AGGLVL", QCEW)

QCEW <- QCEW %>%                    # 5. Size
  left_join(SIZE_TITLES, by = "size_code")
dbg("after SIZE", QCEW)

# 6. Disclosure flags (already suppressed values filled)
QCEW <- QCEW %>%
  mutate(QCEW_disclosure_status = if_else(is.na(annual_avg_emplvl), "SUPPRESSED", "DISCLOSED"))

# 7. NAICS hierarchy   (use crosswalk)
QCEW <- QCEW %>%
  mutate(ind_num = as.numeric(str_extract(industry_code, "^[0-9]+")),
         ind_len = nchar(str_extract(industry_code, "^[0-9]+"))) %>%
  left_join(NAICS_HIERARCHY_CROSSWALK %>%
              rename(ind_num = naics6_code), by = "ind_num")
dbg("after NAICS x‑walk", QCEW)

# 8. COUNTY → MSA/CSA crosswalk
COUNTY_MSA_CSA_CROSSWALK <- COUNTY_MSA_CSA_CROSSWALK %>%
  rename(county_code=`County Code`, county_title=`County Title`,
         msa_code=`MSA Code`, msa_title=`MSA Title`,
         csa_code=`CSA Code`, csa_title=`CSA Title`)
QCEW <- QCEW %>%
  left_join(COUNTY_MSA_CSA_CROSSWALK,
            by = c("area_fips" = "county_code"))
dbg("after crosswalk", QCEW)

## 2‑d  ADDITIONAL CONTEXT  -----------------------------------------------------
ts_msg("Adding analytical fields …")
QCEW <- QCEW %>%
  group_by(area_fips) %>%
  mutate(total_area_empl = sum(annual_avg_emplvl, na.rm = TRUE)) %>%
  ungroup() %>%
  group_by(industry_code) %>%
  mutate(total_ind_empl = sum(annual_avg_emplvl, na.rm = TRUE)) %>%
  ungroup() %>%
  mutate(location_quotient = (annual_avg_emplvl / total_area_empl) /
           (total_ind_empl /
              sum(annual_avg_emplvl, na.rm = TRUE)),
         empl_pct_of_area   = annual_avg_emplvl / total_area_empl)

QCEW <- QCEW %>%
  mutate(LQ_bucket = cut(location_quotient,
                         breaks = c(-Inf, .75, 1.25, 2, Inf),
                         labels = c("<0.75","0.75‑1.25","1.25‑2",">2")))

dbg("after context vars", QCEW)

## 2‑e  FINAL CHECKS ------------------------------------------------------------
ts_msg("Running final NA audit …")
na_cols <- colSums(is.na(QCEW))
ts_msg("Cols w/ NAs >", sum(na_cols > 0))
print(sort(na_cols[na_cols > 0]))

## 2‑f WRITE ENRICHED -----------------------------------------------------------
ts_msg("Writing enriched CSV …")
write_csv(QCEW, OUT_ENRCH)
ts_msg("Enriched rows:", nrow(QCEW))
mem_snap("end")

ts_msg("===== PIPELINE COMPLETED SUCCESSFULLY =====")
